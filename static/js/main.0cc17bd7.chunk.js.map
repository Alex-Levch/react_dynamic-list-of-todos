{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputValue","selectValue","handleChange","ev","target","value","name","setState","filterForInput","todo","title","includes","handleSelect","completed","this","props","todos","selectUser","filteredTodos","filter","className","placeholder","type","onChange","map","key","id","classNames","readOnly","checked","onClick","userId","React","Component","request","path","a","fetch","response","json","result","data","console","warn","message","getUser","CurrentUser","selectedUser","then","user","prevProps","clearUser","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cc17bd7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputValue: '',\n    selectValue: '',\n  }\n\n  handleChange = (ev) => {\n    const { value, name } = ev.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterForInput = todo => (\n    todo.title === null\n      ? todo.title\n      : todo.title.includes(this.state.inputValue)\n  )\n\n  handleSelect = (todo) => {\n    if (this.state.selectValue === 'active') {\n      return !todo.completed;\n    }\n\n    if (this.state.selectValue === 'completed') {\n      return todo.completed;\n    }\n\n    return todo;\n  }\n\n  render() {\n    const { todos, selectUser } = this.props;\n    const { inputValue, selectValue } = this.state;\n    const filteredTodos = todos\n      .filter(this.filterForInput).filter(this.handleSelect);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          className=\"TodoList__input\"\n          placeholder=\"Search\"\n          type=\"text\"\n          name=\"inputValue\"\n          value={inputValue}\n          onChange={this.handleChange}\n        />\n        <select\n          className=\"TodoList__select\"\n          value={selectValue}\n          name=\"selectValue\"\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly checked={todo.completed} />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      completed: PropTypes.bool,\n      title: PropTypes.string,\n      userId: PropTypes.number,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = async path => {\n  try {\n    const response = await fetch(`${BASE_URL}${path}`);\n    const result = await response.json();\n\n    return result.data;\n  } catch (error) {\n    console.warn(error.message);\n  }\n};\n\nexport const getTodos = () => request('/todos');\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: null,\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(user => this.setState({\n        selectedUser: user,\n      }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then(user => this.setState({\n          selectedUser: user,\n        }));\n    }\n  }\n\n  render() {\n    // const { id, name, email, phone } = this.state.selectedUser;\n    const { selectedUser } = this.state;\n\n    if (!selectedUser) {\n      return 'Loading...';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {` ${selectedUser.id}`}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n        <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({ todos }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}